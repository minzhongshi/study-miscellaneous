/**
 * 编写一个程序，通过填充空格来解决数独问题。
 *
 * 数独的解法需 遵循如下规则：
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 *
 * 示例 1：
 * 输入：board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]]
 * 输出：[["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
 */
/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solveSudoku = function(board) {
    function traverse() {
        for (let i = 0;i<9;i++){
            for(let j = 0;j<9;j++){
                if(board[i][j] === '.'){
                    for(let k = 1;k<=9;k++){ // 尝试填入1-9
                        if(isValid(i,j,k)){ // 判断当前位置是否可以填入k
                            board[i][j] = k.toString() // 填入k
                            if(traverse()) return true // 递归填入下一个
                            board[i][j] = '.' // 回溯
                        }
                    }
                    return false
                }
            }
        }
        return true
    }
    traverse(board)
    return board

    // 判断当前位置是否可以填入k
    function isValid(i,j,k) {
        for(let m = 0;m<9;m++){
            if(board[i][m] === k.toString()) return false // 判断行
            if(board[m][j] === k.toString()) return false // 判断列
            if(board[Math.floor(i/3)*3+Math.floor(m/3)][Math.floor(j/3)*3+m%3] === k.toString()) return false // 判断3*3方格
        }
        return true
    }
};