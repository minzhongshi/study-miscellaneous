/**
 * 正则表达式有两种方式
 * 1. 字面量
 *    直接用两个斜杠包裹正则表达式，后面可以跟修饰符
 * 2. 构造函数
 *    通过new RegExp()创建正则表达式，第一个参数是正则表达式，第二个参数是修饰符
 *    注意：构造函数的参数是字符串，所以字符串中的特殊字符需要转义
 *
 *  修饰符：
 *    g: 全局匹配
 *    i: 忽略大小写
 *    m: 多行匹配
 *    u: Unicode模式
 *    y: 粘连模式
 *    s: dotAll模式
 *    f: 允许匹配任何字符
 *    d: 允许匹配任何字符
 *    x: 允许注释
 *    A: 允许^匹配行首
 *    Z: 允许$匹配行尾
 *    B: 允许\B匹配非单词边界
 *    D: 允许\D匹配非数字
 *    S: 允许\S匹配非空白
 *    W: 允许\W匹配非单词字符
 *    w: 允许\w匹配单词字符
 *    U: 允许\p{...}和\P{...}Unicode属性
 *
 *  表达式：
 *    []: 匹配方括号中的任意字符
 *    ^: 匹配行首
 *   [^]: 匹配除了方括号中的任意字符
 *   [0-9a-zA-Z]: 匹配0-9或a-z或A-Z中的任意字符
 *   $: 匹配行尾
 *   (): 分组 ===> 分组的内容可以通过$1,$2...$n获取
 *   (?:): 取消分组
 *   (?=): 正向预查 ===> 匹配内容前面的内容
 *   (?<=): 反向预查 ===> 匹配内容后面的内容
 *   (?!=): 负向正查 ===> 匹配内容前面不是某内容的内容
 *    \d: 匹配数字
 *    \D: 匹配非数字
 *    \s: 匹配空白字符
 *    \S: 匹配非空白字符
 *    \w: 匹配单词字符
 *    \W: 匹配非单词字符
 *    \b: 匹配单词边界
 *    \B: 匹配非单词边界
 *    \0: 匹配null
 *    \n: 匹配换行符
 *    \f: 匹配换页符
 *    \r: 匹配回车符
 *    \t: 匹配制表符
 *    \v: 匹配垂直制表符
 *
 * @type {RegExp}
 */
let str = 'abc'
let reg = /a/g
let reg2 = new RegExp('a','g')
console.log(reg.test(str))// true
console.log(reg2.test(str))// true